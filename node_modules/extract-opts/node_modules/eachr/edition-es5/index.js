"use strict";
/* eslint no-cond-assign:0 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
// external
var typechecker_1 = require("typechecker");
/**
 * Iterate through the subject with the callback.
 * If you ECMAScript version supports it, use `for ( const [key, value] of Object.entries(thing) )` instead.
 * @throws if subject is not an array, plain object, or map
 */
function eachr(subject, callback) {
    if ((0, typechecker_1.isArray)(subject)) {
        for (var key = 0; key < subject.length; ++key) {
            var value = subject[key];
            if (callback.call(subject, value, key, subject) === false) {
                break;
            }
        }
    }
    else if ((0, typechecker_1.isPlainObject)(subject)) {
        for (var key in subject) {
            if (subject.hasOwnProperty(key)) {
                var value = subject[key];
                if (callback.call(subject, value, key, subject) === false) {
                    break;
                }
            }
        }
    }
    else if ((0, typechecker_1.isMap)(subject)) {
        var entries = subject.entries();
        var entry = void 0;
        while ((entry = entries.next().value)) {
            var _a = __read(entry, 2), key = _a[0], value = _a[1]; // destructuring
            if (callback.call(subject, value, key, subject) === false) {
                break;
            }
        }
    }
    else {
        // Perhaps falling back to a `for of` loop here would be sensible
        throw new Error('eachr does not know how to iterate what was passed to it');
    }
    // return
    return subject;
}
exports.default = eachr;
